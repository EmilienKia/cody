#
# Default configuration for Cody text editor
#


#
# "editor" group set all display properties and artifacts
#

[editor]

# Text decoration preferences:

# Show caret line
show-caret-line     = 1
# Dont show white spaces and tabulations
show-white-spaces   = 0
# Dont show indentation guides
show-indent-guides  = 0
# Dont show end-of-line characters
show-end-of-lines   = 0
# Dont wrap long lines
wrap-long-lines     = 0

# Margin preferences:

# Show line number margin
margin-line-numbers = 1
# Show marker margin
margin-markers      = 1
# Show folder margin
margin-folders      = 1
# Dont show vertical line indicating long lines
margin-long-line    = 0


#
# "editor/theme/*" define editor themes .
# Themes are name-defined set of font and color properties.
#
[editor/theme]
# Current theme id
theme = default

[editor/theme/default] # Default editor theme
id    = default
name  = "Default"
font.base = font:!Bitstream Vera Sans Mono,size:9
font.small = font:!Bitstream Vera Sans Mono,size:8
font.comment = font:!Bitstream Vera Serif,size:9
font.code.comment.box = $(font.comment)
font.code.comment.line = $(font.comment)
font.code.comment.doc = $(font.comment)
font.code.comment.nested = $(font.comment)
font.text = font:!Bitstream Charter,size:10
font.text.comment = font:!Serif,size:9
font.embedded.base = font:!Serif,size:9
font.embedded.comment = font:!Serif,size:9
font.monospace = font:!Bitstream Vera Sans Mono,size:9
font.vbs = font:!Bitstream Vera Sans Mono,size:9
colour.code.comment.box = fore:#007F00
colour.code.comment.line = fore:#007F00
colour.code.comment.doc = fore:#3F703F
colour.code.comment.nested = fore:#A0C0A0
colour.text.comment = fore:#0000FF,back:#D0F0D0
colour.other.comment = fore:#007F00
colour.embedded.comment = back:#E0EEFF
colour.embedded.js = back:#F0F0FF
colour.notused = back:#FF0000
colour.number = fore:#007F7F
colour.keyword = fore:#00007F
colour.string = fore:#7F007F
colour.char = fore:#7F007F
colour.operator = fore:#000000
colour.preproc = fore:#7F7F00
colour.error = fore:#FFFF00,back:#FF0000


#
# "editor/style/*" define styles.
# Style is a definition af a group of lexing style (0 to 37) from theme definition.
# Theme variables are used by their definition names (in the form of "$(...)")
# eventually augmented of direct style definitions.
# These styles are apply to lexers.
# The _special_ "default" style is applied by default to all styles.  
#
[editor/style/default]
# Default
stylename.0 = Default
style.0     = $(font.base)
# Default
# stylename.32 = Default
# style.32     = $(font.base)
# Line number
stylename.33 = Line number
style.33     = back:#C0C0C0,$(font.base)
# Brace highlight
stylename.34 = Brace highlight
style.34     = fore:#0000FF,bold
# Brace incomplete highlight
stylename.35 = Incomplete brace highlight
style.35     = fore:#FF0000,bold
# Control characters
stylename.36 = Control character
style.36     =
# Indentation guides
stylename.37 = Indentation guide
style.37     = fore:#C0C0C0,back:#FFFFFF


[editor/style/python]
# White space
stylename.0 = Default
style.0     = fore:#808080
# Comment
stylename.1 = Comment
style.1 = fore:#007F00,$(font.comment)
# Number
stylename.2 = Number
style.2     = fore:#007F7F
# String
stylename.3 = String
style.3     = fore:#7F007F,$(font.monospace)
# Single quoted string
stylename.4 = Character
style.4     = fore:#7F007F,$(font.monospace)
# Keyword
stylename.5 = Keyword
style.5     = fore:#00007F,bold   
# Triple quotes
stylename.6 = Triple quotes
style.6     = fore:#7F0000
# Triple double quotes
stylename.7 = Triple double quotes
style.7     = fore:#7F0000
# Class name definition
stylename.8 = Class name
style.8     = fore:#0000FF,bold
# Function or method name definition
stylename.9 = Method definition
style.9     = fore:#007F7F,bold
# Operators
stylename.10 = Operator
style.10     = bold
# Identifiers
stylename.11 = Identifier
style.11     =
# Comment-blocks
stylename.12 = Comment block
style.12     = fore:#7F7F7F
# End of line where string is not closed
stylename.13 = String end-of-line
style.13     = fore:#000000,$(font.monospace),back:#E0C0E0,eolfilled
# Highlighted identifiers
stylename.14 = Other keywords
style.14     = fore:#407090
# Decorators
stylename.15 = Decorator
style.15     = fore:#805000


[editor/style/cpp]
# White space
stylename.0 = Default
style.0     = fore:#808080
# Comment: /* */.
stylename.1 = Comment
style.1     = $(colour.code.comment.box),$(font.code.comment.box)
# Line Comment: //.
stylename.2 = Comment line
style.2     = $(colour.code.comment.line),$(font.code.comment.line)
# Doc comment: block comments beginning with /** or /*!
stylename.3 = Comment doc
style.3     = $(colour.code.comment.doc),$(font.code.comment.doc)
# Number
stylename.4 = Number
style.4     = $(colour.number)
# Keyword
stylename.5 = Word
style.5     = $(colour.keyword),bold
# Double quoted string
stylename.6 = String
style.6     = $(colour.string)
# Single quoted string
stylename.7 = Character
style.7     = $(colour.char)
# UUIDs (only in IDL)
stylename.8 = UUIDs
style.8     = fore:#804080
# Preprocessor
stylename.9 = Preprocessor
style.9     = $(colour.preproc)
# Operators
stylename.10 = Operator
style.10     = $(colour.operator),bold
# Identifiers
stylename.11 = Identifier
style.11     =
# End of line where string is not closed
stylename.12 = String end-of-line
style.12     = fore:#000000,$(font.monospace),back:#E0C0E0,eolfilled
# Verbatim strings for C#
stylename.13 = Verbatim
style.13     = fore:#007F00,$(font.monospace),back:#E0FFE0,eolfilled
# Regular expressions for JavaScript
stylename.14 = Regular expression
style.14     = fore:#3F7F3F,$(font.monospace),back:#E0F0FF,eolfilled
# Doc Comment Line: line comments beginning with /// or //!.
stylename.15 = Comment line doc
style.15     = $(colour.code.comment.doc),$(font.code.comment.doc)
# Keywords2
stylename.16 = Other keywords
style.16     = fore:#B00040
# Comment keyword
stylename.17 = Comment doc keyword
style.17     = fore:#3060A0,$(font.code.comment.doc)
# Comment keyword error
stylename.18 = Comment doc keyword error
style.18     = fore:#804020,$(font.code.comment.doc)
# Global class
stylename.19 = Global class
style.19     =
# Raw strings for C++0x
stylename.20 = Raw string
style.20     = $(colour.string),back:#FFF3FF,eolfilled
# Triple-quoted strings for Vala
stylename.21 = Triple-quoted string
style.21     = $(font.monospace),fore:#007F00,back:#E0FFE0,eolfilled
# Hash-quoted strings for Pike
stylename.22 = Hash-quoted string
style.22     = $(font.monospace),fore:#007F00,back:#E7FFD7,eolfilled
# Preprocessor stream comment
stylename.23 = Preprocessor comment
style.23 = fore:#659900


[editor/style/xml]
# Default
stylename.0 = Default
style.0     = 
# Tags
stylename.1 = Tags
style.1     = $(colour.operator)
# Unknown Tags
stylename.2 = Unknown tags
style.2     = $(colour.error)
# Attributes
stylename.3 = Attributes
style.3     = 
# Unknown Attributes
stylename.4 = Number
style.4     = $(colour.error)
# Numbers
stylename.5 = Numbers
style.5     = $(colour.number)
# Double quoted string
stylename.6 = String
style.6     = $(colour.string)
# Single quoted string
stylename.7 = Character
style.7     = $(colour.string)
# Other inside tag
stylename.8 = Other inside tag
style.8     =
# Comment
stylename.9 = Comment
style.9     = $(colour.code.comment.box),$(font.code.comment.box)
# Entities
stylename.10 = Entities
style.10     = $(colour.keyword)
# XML style tag ends '/>'
stylename.11 = XML style tag ends '/>'
style.11     = $(colour.preproc)
# XML identifier start '<?'
stylename.12 = XML identifier start '<?'
style.12     = $(colour.preproc)
# XML identifier end '?>'
stylename.13 = XML identifier end '?>'
style.13     = $(colour.preproc)
# CDATA
stylename.17 = CDATA
style.17     =
# Question
stylename.18 = Question
style.18     =
# Unquoted Value
stylename.19 = Unquoted Value
style.19     =
# SGML tags <! ... >
stylename.21 = SGML tags <! ... >
style.21     = $(colour.preproc)
# SGML command
stylename.22 = SGML command
style.22     = $(colour.preproc),bold
# SGML 1st param
stylename.23 = SGML 1st param
style.23 =
# SGML double string
stylename.24 = SGML double string
style.24 = $(colour.string)
# SGML single string
stylename.25 = SGML single string
style.25 = $(colour.string)
# SGML error
stylename.26 = SGML error
style.26 = $(colour.error)
# SGML special (#xxxx type)
stylename.27 = SGML special (#xxxx type)
style.27 = $(colour.keyword)
# SGML entity
stylename.28 = SGML entity
style.28 = $(colour.keyword)
# SGML comment
stylename.29 = SGML comment
style.29 = $(colour.code.comment.box),$(font.code.comment.box)
# SGML block
stylename.31 = SGML block
style.31 =



[filetype]
#nothing here


[filetype/txt]
id       = txt
name     = "Plain text"
lexer    = txt
patterns = "*.txt;*.log;*.lst;*.doc;*.diz;*.nfo"
filter   = "Text (txt log lst doc diz nfo)"
style    = default

[filetype/python] # 2
id       = python
name     = "Python"
lexer    = python
patterns = "*.py;*.pyw"
filter   = "Python (py pyw)"
style    = python
keywords.0 = and as assert break class continue def del elif else except exec finally for from global if import in is lambda not or pass print raise return try while with yield cdef cimport cpdef
usedstyles = 


[filetype/scons] # 2 (like python)
id       = scons
name     = "SCons"
lexer    = python
patterns = "SConstruct;SConscript"
filter   = "SCons (SConstruct;SConscript)"
style    = python
keywords.0 = and as assert break class continue def del elif else except exec finally for from global if import in is lambda not or pass print raise return try while with yield


[filetype/cpp] # 3 C++
id       = cpp
name     = "C++"
lexer    = cpp
patterns = "*.c;*.cc;*.cpp;*.cxx;*.h;*.hh;*.hpp;*.hxx;*.ipp;*.m;*.mm;*.sma"
filter   = "C/C++ (c cc cpp cxx h hh hpp hxx ipp m mm sma)"
style    = cpp
keywords.0 = and and_eq asm auto bitand bitor bool break case catch char class compl const const_cast continue default delete do double dynamic_cast else enum explicit export extern false float for friend goto if inline int long mutable namespace new not not_eq operator or or_eq private protected public register reinterpret_cast return short signed sizeof static static_cast struct switch template this throw true try typedef typeid typename union unsigned using virtual void volatile wchar_t while xor xor_eq
# keywords.2 is for highlighting user defined keywords or function calls or similar
# keywords3 is for doc comment keywords, highlighted in style 17
keywords.3 = a addindex addtogroup anchor arg attention author b brief bug c class code date def defgroup deprecated dontinclude e em endcode endhtmlonly endif endlatexonly endlink endverbatim enum example exception f$ f[ f] file fn hideinitializer htmlinclude htmlonly if image include ingroup internal invariant interface latexonly li line link mainpage name namespace nosubgrouping note overload p page par param param[in] param[out] post pre ref relates remarks return retval sa section see showinitializer since skip skipline struct subsection test throw throws todo typedef union until var verbatim verbinclude version warning weakgroup $ @ \ & < > # { }
# keywords.5 is for preprocessor definitions and will cause inactive code
# to be greyed out. This setting is a space separated list of definitions
# where a definition may be of the form NAME=VALUE or simply NAME.
#keywords.5=_MSC_VER SCI_NAMESPACE GTK_MAJOR_VERSION=2


[filetype/csharp] # 3 C++
id       = csharp
name     = "C#"
lexer    = cpp
patterns = "*.cs"
filter   = "C# (cs)"
keywords.0 = abstract as ascending base bool break by byte case catch char checked class const continue decimal default delegate descending do double else enum equals event explicit extern false finally fixed float for foreach from goto group if implicit in int interface internal into is join lock let long namespace new null object on operator orderby out override params private protected public readonly ref return sbyte sealed select short sizeof stackalloc static string struct switch this throw true try typeof uint ulong unchecked unsafe ushort using var virtual void volatile where while
style    = cpp


[filetype/rc] # 3 C++
id       = rc
name     = "Resources"
lexer    = cpp
patterns = "*.rc;*.rc2;*.dlg"
filter   = "Resources (rc rc2 dlg)"
keywords.0 = ACCELERATORS ALT AUTO3STATE AUTOCHECKBOX AUTORADIOBUTTON BEGIN BITMAP BLOCK BUTTON CAPTION CHARACTERISTICS CHECKBOX CLASS COMBOBOX CONTROL CTEXT CURSOR DEFPUSHBUTTON DIALOG DIALOGEX DISCARDABLE EDITTEXT END EXSTYLE FONT GROUPBOX ICON LANGUAGE LISTBOX LTEXT MENU MENUEX MENUITEM MESSAGETABLE POPUP PUSHBUTTON RADIOBUTTON RCDATA RTEXT SCROLLBAR SEPARATOR SHIFT STATE3 STRINGTABLE STYLE TEXTINCLUDE VALUE VERSION VERSIONINFO VIRTKEY
style    = cpp


[filetype/vala] # 3 C++
id       = vala
name     = "Vala"
lexer    = cpp
patterns = "*.vala"
filter   = "Vala (vala)"
keywords.0 = if else switch case default break continue return yield for foreach in do while try catch finally throw
keywords.2 = namespace interface class struct enum delegate signal errordomain construct get set value base const static var dynamic weak unowned virtual abstract override public protected private extern throws requires ensures yields out ref lock using true false null delete generic new this typeof sizeof as owned int string char bool
style    = cpp

[filetype/java] # 3 C++
id       = java
name     = "Java"
lexer    = cpp
patterns = "*.java;*.jad;*.pde"
filter   = "Java (java jad pde)"
keywords.0 = abstract assert boolean break byte case catch char class const continue default do double else enum extends final finally float for goto if implements import instanceof int interface long native new package private protected public return short static strictfp super switch synchronized this throw throws transient try var void volatile while
# keywords3 is for doc comment keywords, highlighted in style 17
keywords.3 = a addindex addtogroup anchor arg attention author b brief bug c class code date def defgroup deprecated dontinclude e em endcode endhtmlonly endif endlatexonly endlink endverbatim enum example exception f$ f[ f] file fn hideinitializer htmlinclude htmlonly if image include ingroup internal invariant interface latexonly li line link mainpage name namespace nosubgrouping note overload p page par param param[in] param[out] post pre ref relates remarks return retval sa section see showinitializer since skip skipline struct subsection test throw throws todo typedef union until var verbatim verbinclude version warning weakgroup $ @ \ & < > # { }
style    = cpp

[filetype/javafx] # 3 C++
id       = javafx
name     = "JavaFX"
lexer    = cpp
patterns = "*.fx"
filter   = "JavaFX (fx)"
keywords.0 = abstract after and as assert at attribute before bind bound break catch class continue def delete else exclusive extends false finally for from function if import indexof insert instanceof lazy mod new not null or override package private protected public-init public public-read return reverse sizeof static super then this throw true try typeof var while
keywords.2 = Boolean Duration Integer Number Object String Void Character Byte Short Long Float Double isInitialized isSameObject print println first in init into inverse last on postinit replace step trigger tween where with
style    = cpp


[filetype/javascript] # 3 C++
id       = javascript
name     = "JavaScript"
lexer    = cpp
patterns = "*.js;*.es"
filter   = "JavaScript (js es)"
keywords.0 = abstract boolean break byte case catch char class const continue debugger default delete do double else enum export extends final finally float for function goto if implements import in instanceof int interface long native new package private protected public return short static super switch synchronized this throw throws transient try typeof var void volatile while with
style    = cpp



[filetype/idl] # 3 C++
id       = idl
name     = "IDL"
lexer    = cpp
patterns = "*.idl;*.odl"
filter   = "IDL (idl odl)"
keywords.0 = aggregatable allocate appobject arrays async async_uuid auto_handle bindable boolean broadcast byte byte_count call_as callback char coclass code comm_status const context_handle context_handle_noserialize context_handle_serialize control cpp_quote custom decode default defaultbind defaultcollelem defaultvalue defaultvtable dispinterface displaybind dllname double dual enable_allocate encode endpoint entry enum error_status_t explicit_handle fault_status first_is float handle_t heap helpcontext helpfile helpstring helpstringcontext helpstringdll hidden hyper id idempotent ignore iid_as iid_is immediatebind implicit_handle import importlib in include in_line int __int64 __int3264 interface last_is lcid length_is library licensed local long max_is maybe message methods midl_pragma midl_user_allocate midl_user_free min_is module ms_union ncacn_at_dsp ncacn_dnet_nsp ncacn_http ncacn_ip_tcp ncacn_nb_ipx ncacn_nb_nb ncacn_nb_tcp ncacn_np ncacn_spx ncacn_vns_spp ncadg_ip_udp ncadg_ipx ncadg_mq ncalrpc nocode nonbrowsable noncreatable nonextensible notify object odl oleautomation optimize optional out out_of_line pipe pointer_default pragma properties propget propput propputref ptr public range readonly ref represent_as requestedit restricted retval shape short signed size_is small source strict_context_handle string struct switch switch_is switch_type transmit_as typedef uidefault union unique unsigned user_marshal usesgetlasterror uuid v1_enum vararg version void wchar_t wire_marshal handle attribute native noscript scriptable shared wstring inout
style    = cpp


[filetype/flash] # 3 C++
id       = flash
name     = "Flash"
lexer    = cpp
patterns = "*.as;*.asc;*.jsfl"
filter   = "Flash (as asc jsfl)"
keywords.0 = add and break case catch class continue default delete do dynamic else eq extends false finally for function ge get gt if implements import in instanceof interface intrinsic le lt ne new not null or private public return set static super switch this throw true try typeof undefined var void while with
keywords.2 = Array Arguments Accessibility Boolean Button Camera Color ContextMenu ContextMenuItem Date Error Function Key LoadVars LocalConnection Math Microphone Mouse MovieClip MovieClipLoader NetConnection NetStream Number Object PrintJob Selection SharedObject Sound Stage String StyleSheet System TextField TextFormat TextSnapshot Video Void XML XMLNode XMLSocket _accProps _focusrect _global _highquality _parent _quality _root _soundbuftime arguments asfunction call capabilities chr clearInterval duplicateMovieClip escape eval fscommand getProperty getTimer getURL getVersion gotoAndPlay gotoAndStop ifFrameLoaded Infinity -Infinity int isFinite isNaN length loadMovie loadMovieNum loadVariables loadVariablesNum maxscroll mbchr mblength mbord mbsubstring MMExecute NaN newline nextFrame nextScene on onClipEvent onUpdate ord parseFloat parseInt play prevFrame prevScene print printAsBitmap printAsBitmapNum printNum random removeMovieClip scroll set setInterval setProperty startDrag stop stopAllSounds stopDrag substring targetPath tellTarget toggleHighQuality trace unescape unloadMovie unLoadMovieNum updateAfterEvent
style    = cpp


[filetype/ch] # 3 C++
id       = ch
name     = "Ch"
lexer    = cpp
patterns = "*.ch;*.chf;*.chs"
filter   = "Ch (ch chf chs)"
keywords.0 = auto array bool break case char class complex ComplexInf ComplexNaN const continue default delete do double else enum export extern float for foreach goto if Inf inline int long namespace NaN new NULL private public register restrict return short signed sizeof static string_t struct switch this typedef union unsigned using void volatile wchar_t while __declspec
style    = cpp


[filetype/go] # 3 C++
id       = go
name     = "Go"
lexer    = cpp
patterns = "*.go"
filter   = "Go (go)"
keywords.0 = bool byte break case chan complex64 complex128 const continue defer default else  for func go goto fallthrough false float32 float64 if import int interface int8 int16 int32 int64 len map nil package range return select string struct switch true type uint uintptr uint8 uint16 uint32 uint64  var
style    = cpp


[filetype/pike] # 3 C++
id       = pike
name     = "Pike"
lexer    = cpp
patterns = "*.pike"
filter   = "Pike (pike)"
keywords.0 = constant enum if do for while else foreach case switch break continue return typeof catch class lambda import inherit static void int string float mixed object function program array mapping multiset
style    = cpp


[filetype/xml] # 5
id       = xml
name     = "XML"
lexer    = xml
patterns = "*.xml;*.xsl;*.svg;*.xul;*.xsd;*.dtd;*.xslt;*.axl;*.xrc;*.rdf"
filter   = "XML (xml xsl svg xul xsd dtd xslt axl xrc rdf)"
style    = xml
# No keyword for xml, as it accepts any keyword
# SGML / DTD keywords
keywords.6 = ELEMENT DOCTYPE ATTLIST ENTITY NOTATION

[filetype/props] # 9
id       = props
name     = "Properties"
lexer    = props
patterns = "*.properties;*.session;*.ini;*.inf;*.reg;*.url;*.cfg;*.cnf;*.aut;*.conf"
filter   = "Properties (ini inf reg url cfg cnf conf)"
# Default
style.0  =
# Comment
style.1  = fore:#007F7F,$(font.comment)
# Section 
style.2  = $(colour.string),back:#E0F0F0,eolfilled
# Assignment operator
style.3  = $(colour.other.operator)
# Default value (@)
style.4  = $(colour.preproc)
# Key
style.5  =
# Matched Operators
style.34 = fore:#0000FF,notbold
style.35 = fore:#FF0000,notbold


[filetype/error] # 10
id       = error
name     = "Error list"
lexer    = error
patterns = "*.err"
filter   = "Error list (err)"
# Default
style.0 = fore:#000000
# python Error
style.1 = fore:#FF0000
# gcc Error
style.2 = fore:#800080
# Microsoft Error
style.3 = fore:#808000
# command or return status
style.4 = fore:#0000FF
# Borland error and warning messages
style.5 = fore:#B06000
# perl error and warning messages
style.6 = fore:#FF0000
# .NET tracebacks
style.7 = fore:#FF0000
# Lua error and warning messages
style.8 = fore:#FF0000
# ctags
style.9 = fore:#FF00FF
# diff changed !
style.10 = fore:#007F00
# diff addition +
style.11 = fore:#00007F
# diff deletion -
style.12 = fore:#007F7F
# diff message ---
style.13 = fore:#7F0000
# PHP error
style.14 = fore:#FF0000
# Essential Lahey Fortran 90 error
style.15 = fore:#FF0000
# Intel Fortran Compiler error
style.16 = fore:#FF0000
# Intel Fortran Compiler v8.0 error/warning
style.17 = fore:#FF0000
# Absoft Pro Fortran 90/95 v8.2 error or warning
style.18 = fore:#FF0000
# HTML Tidy
style.19 = fore:#FF0000
# Java runtime stack trace
style.20 = fore:#FF0000
# Text matched with find in files and message part of GCC errors
style.21 = fore:#000000
style.32 = fore:#B06000,$(font.small)
# Ensures that spacing is not affected by line number styles
style.33 = $(font.small)



[filetype/make] # 11
id       = make
name     = "Makefile"
lexer    = make
patterns = "makefile;Makefile;Makefile.*;*.mak;configure"
filter   = "Makefile (mak makefile)"
# Default
style.0  = fore:#000000
# Comment: #
style.1  = $(colour.other.comment),$(font.code.comment.box)
# Pre-processor or other comment: !
style.2  = $(colour.preproc)
# Variable: $(x)
style.3  = fore:#000080
# Operator
style.4  = $(colour.other.operator)
# Target
style.5  = fore:#A00000
# Error
style.9  = $(colour.error),eolfilled
# Matched Operators
style.34 = fore:#0000FF,notbold
style.35 = fore:#FF0000,notbold


[filetype/winbatch] # 12
id       = winbatch
name     = "Windows batch"
lexer    = winbatch
patterns = "*.bat;*.cmd;*.nt"
filter   = "Windows Batch (bat cmd nt)"
keywords.0 = rem set if exist errorlevel for in do break call chcp cd chdir choice cls country ctty date del erase dir echo exit goto loadfix loadhigh mkdir md move path pause prompt rename ren rmdir rd shift time type ver verify vol com con lpt nul color copy defined else not start
# Default
style.0 = fore:#000000
# Comment (rem or ::)
style.1 = fore:#007F00,$(font.comment)
# Keywords
style.2 = $(colour.keyword),bold
# Label (line beginning with ':')
style.3 = $(colour.string),back:#606060,fore:#FFFF00,eolfilled
# Hide command character ('@')
style.4 = $(colour.preproc)
# External commands
style.5 = fore:#007090,$(font.monospace),bold
# Variable: %%x (x is almost whatever, except space and %), %n (n in [0-9]), %EnvironmentVar%
style.6 = fore:#800080
# Operator: * ? < > |
style.7 = fore:#000000


[filetype/diff] # 16
id       = diff
name     = "Difference"
lexer    = diff
patterns = "*.diff;*.patch"
filter   = "Difference (diff patch)"
# Default
style.0 = fore:#000000
# Comment (part before "diff ..." or "--- ..." and , Only in ..., Binary file...)
style.1 = fore:#007F00
# Command (diff ...)
style.2 = fore:#7F7F00
# Source file (--- ...) and Destination file (+++ ...)
style.3 = fore:#7F0000
# Position setting (@@ ...)
style.4 = fore:#7F007F
# Line removal (-...)
style.5 = fore:#007F7F
# Line addition (+...)
style.6 = fore:#00007F
# Line change (!...)
style.7 = fore:#7F7F7F

